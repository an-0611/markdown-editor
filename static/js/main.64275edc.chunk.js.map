{"version":3,"sources":["actions/articleActions.js","reducers/articles.js","reducers/index.js","common/svg/PlusIcon.js","components/Articles.js","components/Article.js","App.js","serviceWorker.js","index.js","store/configureStore.js"],"names":["GET_ARTICLES_DATA","UPDATE_ARTICLE_DATA","getArticlesData","articles","type","updateArticleData","id","title","content","modifiedTime","payload","initialState","reducer","combineReducers","articlesReducer","state","action","index","findIndex","article","modifiedArticle","PlusIcon","props","handleClick","onClick","className","viewBox","version","width","height","fill","aria-hidden","fillRule","d","Articles","this","history","allArticles","map","i","key","push","source","Component","connect","dispatch","actions","bindActionCreators","articleAction","RedBtn","styled","button","Article","mappingArticle","ableEdit","handleChangeTitle","bind","editArticle","cancelEdit","match","params","find","setState","event","target","value","length","time","Date","getTime","onChange","submitEdit","options","mode","theme","lineNumbers","onBeforeChange","editor","data","date","year","getFullYear","month","getMonth","day","getDate","hour","getHours","minute","getMinutes","second","getSeconds","formatTime","App","to","console","log","path","exact","component","Boolean","window","location","hostname","store","client","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","reducers","configureStore","INITIAL_STATE","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.64275edc.chunk.js","sourcesContent":["export const GET_ARTICLES_DATA = 'GET_ARTICLE_DATA';\nexport const UPDATE_ARTICLE_DATA = 'UPDATE_ARTICLE_DATA';\n// export const DELETE_ARTICLE_DATA = 'DELETE_ARTICLE_DATA'; \n\nexport function getArticlesData(articles) {\n    return {\n        type: GET_ARTICLES_DATA,\n        // payload: articles\n    }\n}\n\nexport function updateArticleData(id, title, content, modifiedTime) {\n    return {\n        type: UPDATE_ARTICLE_DATA,\n        payload: {\n            id,\n            title,\n            content,\n            modifiedTime,\n        },\n    }\n}\n\n// export function fetchProductsError(error) {\n//     return {\n//         type: DELETE_ARTICLE_DATA,\n//         error: error\n//     }\n// }\n","import { GET_ARTICLES_DATA, UPDATE_ARTICLE_DATA } from '../actions/articleActions';\n\nconst initialState = {\n  articles: [\n    {\n        id: '1',\n        title: 'title1',\n        content: '# This is a header\\n\\nAnd this is a paragraph',\n        modifiedTime: 1579157754943,\n    },\n    {\n        id: '2',\n        title: 'title2',\n        content: `### Step 1 : Create your app\n        \\`\\`\\`$ npm install -g create-react-app $ create-react-app my-app\n        \\`\\`\\` ### Step 2 : Build it for production`,\n        modifiedTime: 1579197794943,\n    }\n  ],\n}\n\nexport default function articlesReducer(state = initialState, action) {\n  switch (action.type) { // 3. accroding actions.type, and use action creator's payload data (e.g. : FETCH_PRODUCTS_PENDING) to change reducer data,\n      case GET_ARTICLES_DATA: \n          return {\n              ...state,\n            //   articles: action.payload.articles,\n          }\n      case UPDATE_ARTICLE_DATA:\n          const index = state.articles.findIndex((article) => { return article.id === action.payload.id; });\n          const modifiedArticle = {\n            id: action.payload.id,\n            title: action.payload.title,\n            content: action.payload.content,\n            modifiedTime: action.payload.modifiedTime,\n          };\n          if (index >= 0) state.articles[index] = modifiedArticle; // state.articles.splice(index, 1);\n          return {\n              ...state,\n              articles: [...state.articles],\n          }\n    //   case FETCH_PRODUCTS_ERROR:\n    //       return {\n    //           ...state,\n    //           pending: false,\n    //           error: action.error\n    //       }\n      default: \n          return state;\n  }\n}\n","import { combineReducers } from 'redux'\nimport articlesReducer from './articles';\n\nconst reducer = combineReducers({\n\tarticlesReducer,\n})\n\nexport default reducer;","import React from 'react';\n\nfunction PlusIcon(props) {\n    const { handleClick } = props;\n    return (\n        <div onClick={handleClick}>\n            <svg className=\"octicon octicon-plus\" viewBox=\"0 0 12 16\" version=\"1.1\" width=\"12\" height=\"16\" fill=\"#fff\" aria-hidden=\"true\">\n                <path fillRule=\"evenodd\" d=\"M12 9H7v5H5V9H0V7h5V2h2v5h5v2z\"></path>\n            </svg>\n        </div>\n    );\n}\n\nexport default PlusIcon;","import React, { Fragment, Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport ReactMarkdown from 'react-markdown';\n\nimport * as articleAction from '../actions/articleActions';\n\nconst mapStateToProps = state => ({\n    articles: state.articlesReducer.articles,\n})\n\nconst mapDispatchToProps = dispatch => {\n    return {\n      actions: bindActionCreators({ ...articleAction }, dispatch),\n    }\n}\n\nclass Articles extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        }\n    }\n    render() {\n        // console.log(this.props.history)\n        const { articles, history } = this.props;\n        const allArticles = articles.map((article, i) => (\n            <Fragment key={i}>\n                <div className=\"ArticleContainer fade-in\" onClick={() => { history.push(`/article/${article.id}`) }}>\n                    <h2>{article.title}</h2>\n                    <ReactMarkdown source={article.content} />\n                </div>\n            </Fragment>\n        ));\n        return (\n            <Fragment>\n                {allArticles}\n                <div className=\"fade-in-delay\">已經是最後一篇文章了</div>\n            </Fragment>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Articles);","import React, { Fragment, Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport styled from \"styled-components\";\nimport ReactMarkdown from 'react-markdown';\nimport {Controlled as CodeMirror} from 'react-codemirror2';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/material.css';\nimport 'codemirror/mode/xml/xml';\nimport 'codemirror/mode/javascript/javascript'\n\nimport * as articleAction from '../actions/articleActions';\n\nconst mapStateToProps = state => ({\n    articles: state.articlesReducer.articles,\n})\n\nconst mapDispatchToProps = dispatch => {\n    return {\n      actions: bindActionCreators({ ...articleAction }, dispatch),\n    }\n}\n\nconst formatTime = (time) => {\n    if (!time) return;\n    const date = new Date(time);\n    const year = date.getFullYear();\n    const month = date.getMonth() + 1;\n    const day = date.getDate();\n    const hour = date.getHours();\n    const minute = date.getMinutes();\n    const second = date.getSeconds();\n    return `${year}/${month}/${day} - ${hour}:${minute}:${second}`;\n}\n\nconst RedBtn = styled.button`\n    padding: 12px 24px;\n    border: 1px solid;\n    color: #ec4646;\n    background: transparent;\n    font-size: 15px;\n    font-weight: 700;\n    line-height: normal;\n    text-transform: uppercase;\n    cursor: pointer;\n    transition: 0.3s ease all;\n`;\n\nclass Article extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            mappingArticle: {},\n            ableEdit: false,\n            title: '',\n            content: '',\n            modifiedTime: null,\n        }\n        this.handleChangeTitle = this.handleChangeTitle.bind(this);\n        this.editArticle = this.editArticle.bind(this);\n        this.cancelEdit = this.cancelEdit.bind(this);\n    }\n\n    componentDidMount() {\n        const {\n            match: {\n                params: { id },\n            },\n            articles,\n        } = this.props;\n        const mappingArticle = articles.find((article) => { return article.id === id; });\n        if (mappingArticle) this.setState({\n            mappingArticle,\n            title: mappingArticle.title,\n            content: mappingArticle.content,\n            modifiedTime: mappingArticle.modifiedTime,\n        });\n    }\n\n    handleChangeTitle(event) {\n        this.setState({ title: event.target.value});\n    }\n\n    editArticle() {\n        this.setState({ ableEdit: true });\n    }\n\n    submitEdit(id) {\n        const { actions } = this.props;\n        const { title, content } = this.state;\n        if (title.length === 0) return;\n        const time = new Date().getTime();\n        this.setState({\n            ableEdit: false,\n            modifiedTime: time,\n        });\n        actions.updateArticleData(id, title, content, time);\n    }\n\n    cancelEdit() {\n        this.setState({ ableEdit: false });\n    }\n\n    render() {\n        const {\n            match: {\n                params: { id },\n            },\n            history,\n            // location,\n        } = this.props;\n        \n        const { ableEdit, title, content, modifiedTime, mappingArticle } = this.state;\n        return (\n            <Fragment>\n                <Fragment>\n                    <div className=\"ArticleContainer\">\n                        <div className=\"ArticleHeader\">\n                            <div>\n                                { !ableEdit && <h2>{title}</h2> }\n                                { ableEdit && <input type=\"text\" value={title} onChange={this.handleChangeTitle} /> }\n                            </div>\n                            <div>\n                                { !ableEdit && <div className=\"btn\" onClick={() => { this.editArticle(id); }}>edit</div> }\n                                { ableEdit && <div className=\"btn\" onClick={() => { this.submitEdit(id); }}>done</div> }\n                                { ableEdit && <div className=\"btn\" onClick={() => { this.cancelEdit(); }}>cancel</div> }\n                            </div>\n                        </div>\n\n                        <div className={ ableEdit ? '' : 'ArticleContent' }>\n                            { !ableEdit && <ReactMarkdown source={content} /> }\n                            { ableEdit &&\n                                <CodeMirror\n                                    value={content} // this.state.value\n                                    options={{\n                                        mode: 'markdown',\n                                        // theme: 'material',\n                                        theme: 'eclipse',\n                                        lineNumbers: true\n                                    }} // options\n                                    onBeforeChange={(editor, data, value) => {\n                                        this.setState({ content: value });\n                                    }}\n                                    onChange={(editor, data, value) => {\n                                    }}\n                                />\n                                // <form id=\"noter-save-form\" method=\"POST\">\n                                //     <textarea id=\"noter-text-area\" name=\"textarea\" value={article.content} onChange={() => { }} />\n                                //     <input type=\"submit\" value=\"Save\" />\n                                // </form>\n                                // <div className=\"MarkDownContainer\">\n                                //     <textarea></textarea>\n                                // </div>\n                            }\n                        </div>\n                        \n                        <div className=\"ArticleFooter\">\n                            <div>{`Last-Modified: ${formatTime(modifiedTime)}`}</div>\n                        </div>\n                    </div>\n                </Fragment>\n                <RedBtn className=\"backArticlesBtn\" onClick={() => { history.push('/') }}>back to Articles</RedBtn>\n            </Fragment>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Article);","import React from 'react';\nimport { Route, NavLink } from 'react-router-dom';\nimport './App.css';\n\nimport PlusIcon from './common/svg/PlusIcon';\nimport Articles from './components/Articles';\nimport Article from './components/Article';\n\nfunction App(props) {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <NavLink to=\"/\" className=\"home\">home</NavLink>\n        <NavLink to=\"/create\">\n          <PlusIcon handleClick={() => { console.log(1); }}/>\n        </NavLink>\n      </header>\n      <div className=\"App-body\">\n        <Route path=\"/\" exact component={Articles} />\n        <Route path=\"/article/:id\" component={Article} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Switch } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport configureStore from './store/configureStore';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst client = {}\nconst history = {}\nconst preloadedState = window.INITIAL_STATE;\nconst store = configureStore(client, history, preloadedState);\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <Switch>\n                <App />\n            </Switch>\n        </BrowserRouter>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {\n  createStore,\n  // applyMiddleware,\n  compose,\n} from 'redux'\n\nimport reducers from '../reducers';\n\nexport default function configureStore(client, history, initialState) {\n  const composeEnhancers =\n    typeof window === 'object' &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n      // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\n    }) : compose;\n\n  const store = createStore(\n    reducers,\n    initialState,\n    composeEnhancers(\n      // applyMiddleware(client.middleware()),\n    ),\n  );\n\n  return store;\n}"],"sourceRoot":""}